plugins {
	id 'java-library'
	id 'net.neoforged.moddev' version '2.0.80'
	id 'idea'
}

version = project.mod_version + "+neo+mc" + project.minecraft_version
group = project.mod_group

base {
	archivesName = project.mod_id
}

repositories {
	maven {
		name = 'Parchment'
		url = 'https://maven.parchmentmc.org/'
	}
}

dependencies {
}

neoForge {
	version = project.neo_version

	// Use official + parchment mappings.
	parchment {
		parchmentArtifact = "org.parchmentmc.data:parchment-${project.parchment_mappings}@zip"
	}

	// Run configurations.
	runs {
		client {
			client()
		}

		server {
			server()
			programArgument '--nogui'
		}

		data {
			clientData()
			// Specify the modid for data generation,
			// where to output the resulting resource,
			// and where to look for existing resources.
			programArguments.addAll '--mod', project.mod_id, '--all',
				'--output', file('src/main/generated/resources/').getAbsolutePath(),
				'--existing', file('src/main/resources/').getAbsolutePath()
		}

		// Aplly to all the run configs above.
		configureEach {
			// Set logging level.
			logLevel = org.slf4j.event.Level.INFO
		}
	}

	mods {
		// There is only one mod.
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources.srcDir 'src/main/generated/resources'

// This block of code expands all declared replace properties in the specified resource targets.
var generateModMetadata =
	tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
		minecraft_version: minecraft_version,
		neo_version      : neo_version,
		mod_id           : mod_id,
		mod_version      : mod_version
	]
	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory.
sourceSets.main.resources.srcDir generateModMetadata
// Run "generateModMetadata" on every project reload.
neoForge.ideSyncTask generateModMetadata

idea {
	module {
		// Download sources/javadoc jars for dependencies.
		downloadSources = true
		downloadJavadoc = true
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	toolchain.languageVersion = JavaLanguageVersion.of(21)
}

jar {
	from("LICENSE")
	exclude(".cache")
}
