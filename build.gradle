plugins {
	id 'java-library'
	id 'net.neoforged.moddev' version '2.0.80'
	id 'idea'
}

version = project.mod_version + "+neo+mc" + project.minecraft_version
group = project.mod_group

base {
	archivesName = project.mod_id
}

repositories {
	maven {
		name = 'Parchment'
		url = 'https://maven.parchmentmc.org/'
	}
}

dependencies {
}

neoForge {
	version = project.neo_version

	parchment {
		parchmentArtifact = "org.parchmentmc.data:parchment-${project.parchment_mappings}@zip"
	}

	// Run configurations.
	runs {
		client {
			client()
		}

		server {
			server()
			programArgument '--nogui'
		}

		data {
			clientData()
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		// define mod <-> source bindings
		// these are used to tell the game which sources are for which mod
		// multi mod projects should define one per mod
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
		minecraft_version      : minecraft_version,
		neo_version            : neo_version,
		mod_id                 : mod_id,
		mod_version            : mod_version
	]
	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

idea {
	module {
		// Download sources/javadoc jars for dependencies.
		downloadSources = true
		downloadJavadoc = true
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "mod_id": project.mod_id,
			"mod_version": project.mod_version,
			"version": project.version,
			"minecraft_version": "${project.minecraft_version}",
			"loader_version": ">=${project.loader_version}",
			"fabric_version": ">=${project.fabric_version}"
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	toolchain.languageVersion = JavaLanguageVersion.of(21)
}

jar {
	from("LICENSE") {
	}
}
